var N=null,E="",T="t",U="u",searchIndex={};
var R=["from_slice","from_raw_parts","The number of bits in the slice.","is_empty","Returns whether there are no bits in the slice.","Adjust the capacity to hold at least `additional`…","usize","bitslice","Returns `index / Self::nbits()`, computed by shifting.","option","Returns `index / Self::nbits()` rounded up, computed by…","block_len","get_bits","Concatenates two bit vectors, with the bits of `self`…","bitconcat","Pads `self` with 0s on the right to reach at least `len`…","bitfill","Returns an object that inverts the values of all the bits…","Returns an object that lazily computes the bit-wise…","Returns an object that lazily computes the bit-wise xor of…","Returns an object that lazily zips a function over the…","try_from","try_into","borrow_mut","to_owned","clone_into","result","type_id","bv::adapter","borrow","typeid","get_bit","get_block","get_raw_block","bit_len","set_block","set_bits","set_bit","push_bit","align_block","push_block","pop_bit","bit_slice","rangeinclusive","rangefrom","rangetoinclusive","rangefull","rangeto","bitslicemut","ordering","partial_cmp","formatter","The number of bits in a block.","div_nbits","checked_div_nbits","ceil_div_nbits","checked_ceil_div_nbits","mod_nbits","Returns `index % Self::nbits()`, computed by masking.","mul_nbits","Returns `index * Self::nbits()`, computed by shifting.","block_bits","The number of bits in the block at `position`, given a…","lg_nbits","Log-base-2 of the number of bits in a block.","lg_nbits_mask","Mask with the lowest-order `lg_nbits()` set.","blocktype","low_mask","The bit mask consisting of `Self::nbits() - element_bits`…","nth_mask","The bit mask with the `bit_index`th bit set.","Extracts the value of the `bit_index`th bit.","with_bit","Functionally updates the value of the `bit_index`th bit to…","Extracts `len` bits starting at bit offset `start`.","with_bits","Functionally updates `len` bits to `value` starting at…","Returns the smallest number `n` such that `2.pow(n) >=…","floor_lg","Returns the largest number `n` such that `2.pow(n) <= self`.","The length of the slice in blocks.","Gets the bit at `position`","Gets the block at `position`, masked as necessary.","Gets the block at `position`, without masking.","Gets `count` bits starting at bit index `start`,…","to_bit_vec","Copies the bits into a new allocated [`BitVec`].","bit_concat","into_bit_concat","into_bit_pad","into_bit_not","bitnot","into_bit_and","bitand","into_bit_or","into_bit_xor","bitxor","into_bit_zip","bitzip","Sets the bit at `position` to `value`.","Sets the block at `position` to `value`.","Sets `count` bits starting at bit index `start`,…","bit_assign","Assigns the bits of `other` to `self`.","bit_and_assign","Assigns the bit-wise and of `self` and `other` to `self`.","bit_or_assign","Assigns the bit-wise or of `self` and `other` to `self`.","bit_xor_assign","Assigns the bit-wise xor of `self` and `other` to `self`.","bit_zip_assign","Performs an op-assignment from `other` to `self`.","Pushes `value` 0 or more times until the size of the bit…","Pushes the given block onto the end of the bit vector.","bit_slice_mut","An alias for `BitSliceable::bit_slice`.","BitSliceMut","BitSliceAdapter","BoolAdapter","BlockType","BitsMutExt","BitSliceable","BitSliceableMut","BitConcat"];

searchIndex["bv"]={"doc":"The main type exported by the library, [`BitVec`], is a…","i":[[3,"BitSlice","bv","A slice of a bit-vector; akin to `&'a [bool]` but packed.",N,N],[3,R[117],E,"A mutable slice of a bit-vector; akin to `&'a mut [bool]`…",N,N],[3,"BitVec",E,"A bit-vector, akin to `Vec<bool>` but packed.",N,N],[11,R[0],E,"Creates a `BitSlice` from an array slice of blocks.",0,[[],["self"]]],[11,R[1],E,"Creates a `BitSlice` from a pointer to its data, an offset…",0,[[["u64"]],["self"]]],[11,"len",E,R[2],0,[[["self"]],["u64"]]],[11,R[3],E,R[4],0,[[["self"]],["bool"]]],[11,R[0],E,"Creates a `BitSliceMut` from a mutable array slice of…",1,[[],["self"]]],[11,R[1],E,"Creates a `BitSliceMut` from a pointer to its data, an…",1,[[["u64"]],["self"]]],[11,"len",E,R[2],1,[[["self"]],["u64"]]],[11,R[3],E,R[4],1,[[["self"]],["bool"]]],[11,"as_bit_slice",E,"Converts a mutable bit slice to immutable.",1,[[["self"]],[R[7]]]],[11,"new",E,"Creates a new, empty bit-vector with a capacity of one…",2,[[],["self"]]],[11,"with_capacity",E,"Creates a new, empty bit-vector with the given bit capacity.",2,[[["u64"]],["self"]]],[11,"with_block_capacity",E,"Creates a new, empty bit-vector with the given block…",2,[[[R[6]]],["self"]]],[11,"new_fill",E,"Creates a new bit-vector of size `len`, filled with all 0s…",2,[[["u64"],["bool"]],["self"]]],[11,"from_bits",E,"Creates a new `BitVec` from any value implementing the…",2,[[["bits"]],["self"]]],[11,"len",E,"The number of bits in the bit-vector.",2,[[["self"]],["u64"]]],[11,R[11],E,"The number of blocks used by this bit-vector.",2,[[["self"]],[R[6]]]],[11,"capacity",E,"The capacity of the bit-vector in bits.",2,[[["self"]],["u64"]]],[11,"block_capacity",E,"The capacity of the bit-vector in blocks.",2,[[["self"]],[R[6]]]],[11,"reserve",E,R[5],2,[[["self"],["u64"]]]],[11,"block_reserve",E,R[5],2,[[["self"],[R[6]]]]],[11,"reserve_exact",E,R[5],2,[[["self"],["u64"]]]],[11,"block_reserve_exact",E,"Adjusts the capacity to at least `additional` blocks…",2,[[["self"],[R[6]]]]],[11,"shrink_to_fit",E,"Shrinks the capacity of the vector as much as possible.",2,[[["self"]]]],[11,"into_boxed_slice",E,"Converts the vector into `Box<[Block]>`.",2,[[],["box"]]],[11,"truncate",E,"Shortens the vector, keeping the first `len` elements and…",2,[[["self"],["u64"]]]],[11,"resize",E,"Resizes the bit-vector, filling with `value` if it has to…",2,[[["self"],["u64"],["bool"]]]],[11,"as_slice",E,"Gets a slice to a `BitVec`.",2,[[["self"]],[R[7]]]],[11,"as_mut_slice",E,"Gets a mutable slice to a `BitVec`.",2,[[["self"]],[R[48]]]],[11,"get",E,"Gets the value of the bit at the given position.",2,[[["self"],["u64"]],["bool"]]],[11,"set",E,"Sets the value of the bit at the given position.",2,[[["self"],["u64"],["bool"]]]],[11,"push",E,"Adds the given `bool` to the end of the bit-vector.",2,[[["self"],["bool"]]]],[11,"pop",E,"Removes and returns the last element of the bit-vector, or…",2,[[["self"]],[[R[9],["bool"]],["bool"]]]],[11,"clear",E,"Removes all elements from the bit-vector.",2,[[["self"]]]],[11,R[3],E,"Does the bit-vector have no elements?",2,[[["self"]],["bool"]]],[0,"adapter",E,"Lazy bit vector adapters.",N,N],[3,R[118],R[28],"An adapter that turns any implementation of `Bits` into a…",N,N],[3,"BitNot",E,"The result of `BitsExt::bit_not`.",N,N],[3,"BitAnd",E,"The result of `BitsExt::bit_and`.",N,N],[3,"BitOr",E,"The result of `BitsExt::bit_or`.",N,N],[3,"BitXor",E,"The result of `BitsExt::bit_xor`.",N,N],[3,"BitZip",E,"The result of `BitsExt::bit_zip`.",N,N],[3,"BitFill",E,"Emulates a constant-valued bit-vector of a given size.",N,N],[3,R[124],E,"The result of `BitsExt::bit_concat`.",N,N],[3,R[119],E,"Adapts a sequence of `bool`s (e.g., `&[bool]`) to emulate…",N,N],[11,"new",E,"Creates a new slice adaptor from the given bit-vector-like.",3,[[[T],["u64"]],["self"]]],[11,"zeroes",E,"Constructs a compact bit-vector-like of `len` 0s.",4,[[["u64"]],["self"]]],[11,"ones",E,"Constructs a compact bit-vector-like of `len` 1s.",4,[[["u64"]],["self"]]],[11,"new",E,"Creates a new `BoolAdapter` from an underlying sequence of…",5,[[[T]],["self"]]],[11,"into_inner",E,"Gets the underlying `bool` sequence object back out of a…",5,[[],[T]]],[8,R[120],"bv","Interface to primitive bit storage.",N,N],[11,"nbits",E,R[52],6,[[],[R[6]]]],[11,R[53],E,R[8],6,[[["u64"]],[R[6]]]],[11,R[54],E,R[8],6,[[["u64"]],[[R[9],[R[6]]],[R[6]]]]],[11,R[55],E,R[10],6,[[["u64"]],[R[6]]]],[11,R[56],E,R[10],6,[[["u64"]],[[R[9],[R[6]]],[R[6]]]]],[11,R[57],E,R[58],6,[[["u64"]],[R[6]]]],[11,R[59],E,R[60],6,[[[R[6]]],["u64"]]],[11,R[61],E,R[62],6,[[["u64"],[R[6]]],[R[6]]]],[11,R[63],E,R[64],6,[[],[R[6]]]],[11,R[65],E,R[66],6,[[],[R[67]]]],[11,R[68],E,R[69],6,[[[R[6]]],["self"]]],[11,R[70],E,R[71],6,[[[R[6]]],["self"]]],[11,R[31],E,R[72],6,[[[R[6]]],["bool"]]],[11,R[73],E,R[74],6,[[[R[6]],["bool"]],["self"]]],[11,R[12],E,R[75],6,[[[R[6]]],["self"]]],[11,R[76],E,R[77],6,[[[R[6]]],["self"]]],[11,"ceil_lg",E,R[78],6,[[],[R[6]]]],[11,R[79],E,R[80],6,[[],[R[6]]]],[10,"wrapping_shl",E,"A shift-left operation that does not overflow.",6,[[["u32"]],["self"]]],[10,"wrapping_sub",E,"A subtraction operation that does not overflow.",6,[[],["self"]]],[10,"leading_zeros",E,"Returns the number of leading zero bits in the given number.",6,[[],[R[6]]]],[10,"to_usize",E,"Converts the number to a `usize`, if it fits.",6,[[],[[R[9],[R[6]]],[R[6]]]]],[10,"zero",E,"Returns 0.",6,[[],["self"]]],[10,"one",E,"Returns 1.",6,[[],["self"]]],[8,"Bits",E,"Read-only bit vector operations.",N,N],[16,"Block",E,"The underlying block type used to store the bits of the…",7,N],[10,R[34],E,"The length of the slice in bits.",7,[[["self"]],["u64"]]],[11,R[11],E,R[81],7,[[["self"]],[R[6]]]],[11,R[31],E,R[82],7,[[["self"],["u64"]],["bool"]]],[11,R[32],E,R[83],7,[[["self"],[R[6]]]]],[11,R[33],E,R[84],7,[[["self"],[R[6]]]]],[11,R[12],E,R[85],7,[[[R[6]],["self"],["u64"]]]],[11,R[86],E,R[87],7,[[["self"]],["bitvec"]]],[8,"BitsExt",E,"Extension trait for adapter operations on bit slices.",N,N],[11,R[88],E,R[13],8,[[["other"],["self"]],[[R[14]],["self"]]]],[11,R[89],E,R[13],8,[[["other"]],[R[14]]]],[11,"bit_pad",E,R[15],8,[[["self"],["u64"]],[[R[16]],["self"],[R[14],[R[16]]]]]],[11,R[90],E,R[15],8,[[["u64"]],[[R[16]],[R[14],[R[16]]]]]],[11,"bit_not",E,R[17],8,[[["self"]],[[R[92]],["self"]]]],[11,R[91],E,R[17],8,[[],[R[92]]]],[11,"bit_and",E,R[18],8,[[["other"],["self"]],[[R[94]],["self"]]]],[11,R[93],E,R[18],8,[[["other"]],[R[94]]]],[11,"bit_or",E,R[18],8,[[["other"],["self"]],[["bitor"],["self"]]]],[11,R[95],E,R[18],8,[[["other"]],["bitor"]]],[11,"bit_xor",E,R[19],8,[[["other"],["self"]],[[R[97]],["self"]]]],[11,R[96],E,R[19],8,[[["other"]],[R[97]]]],[11,"bit_zip",E,R[20],8,[[["other"],["self"],["f"]],[[R[99]],["self"]]]],[11,R[98],E,R[20],8,[[["other"],["f"]],[R[99]]]],[8,"BitsMut",E,"Mutable bit vector operations that don’t affect the length.",N,N],[11,R[37],E,R[100],9,[[["self"],["u64"],["bool"]]]],[11,R[35],E,R[101],9,[[["self"],[R[6]]]]],[11,R[36],E,R[102],9,[[[R[6]],["self"],["u64"]]]],[8,R[121],E,"Extension trait for mutable operations on bit slices.",N,N],[11,R[103],E,R[104],10,[[["self"],["bits"]]]],[11,R[105],E,R[106],10,[[["self"],["bits"]]]],[11,R[107],E,R[108],10,[[["self"],["bits"]]]],[11,R[109],E,R[110],10,[[["self"],["bits"]]]],[11,R[111],E,R[112],10,[[["self"],[T],["f"]]]],[8,"BitsPush",E,"Bit vector operations that change the length.",N,N],[10,R[38],E,"Adds the given bit to the end of the bit vector.",11,[[["self"],["bool"]]]],[10,R[41],E,"Removes and returns the last bit, if any.",11,[[["self"]],[[R[9],["bool"]],["bool"]]]],[11,R[39],E,R[113],11,[[["self"],["bool"]]]],[11,R[40],E,R[114],11,[[["self"]]]],[8,R[122],E,"Types that support slicing by ranges.",N,N],[16,"Slice",E,"The type of the slice produced.",12,N],[10,R[42],E,"Slices or re-slices the given object.",12,[[["range"]]]],[8,R[123],E,"Types that produce mutable slices.",N,N],[11,R[115],E,R[116],13,[[["range"]]]],[14,"bit_vec",E,"Like `vec!` but for `BitVec`.",N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,R[21],E,E,0,[[[U]],[R[26]]]],[11,R[22],E,E,0,[[],[R[26]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[["self"]],[R[30]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[26]]]],[11,R[22],E,E,1,[[],[R[26]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[["self"]],[R[30]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[24],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"],[T]]]],[11,R[21],E,E,2,[[[U]],[R[26]]]],[11,R[22],E,E,2,[[],[R[26]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[27],E,E,2,[[["self"]],[R[30]]]],[11,"into",R[28],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,R[21],E,E,3,[[[U]],[R[26]]]],[11,R[22],E,E,3,[[],[R[26]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[["self"]],[R[30]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[24],E,E,14,[[["self"]],[T]]],[11,R[25],E,E,14,[[["self"],[T]]]],[11,R[21],E,E,14,[[[U]],[R[26]]]],[11,R[22],E,E,14,[[],[R[26]]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[27],E,E,14,[[["self"]],[R[30]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[24],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"],[T]]]],[11,R[21],E,E,15,[[[U]],[R[26]]]],[11,R[22],E,E,15,[[],[R[26]]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[23],E,E,15,[[["self"]],[T]]],[11,R[27],E,E,15,[[["self"]],[R[30]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[24],E,E,16,[[["self"]],[T]]],[11,R[25],E,E,16,[[["self"],[T]]]],[11,R[21],E,E,16,[[[U]],[R[26]]]],[11,R[22],E,E,16,[[],[R[26]]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[23],E,E,16,[[["self"]],[T]]],[11,R[27],E,E,16,[[["self"]],[R[30]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[24],E,E,17,[[["self"]],[T]]],[11,R[25],E,E,17,[[["self"],[T]]]],[11,R[21],E,E,17,[[[U]],[R[26]]]],[11,R[22],E,E,17,[[],[R[26]]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[23],E,E,17,[[["self"]],[T]]],[11,R[27],E,E,17,[[["self"]],[R[30]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[24],E,E,18,[[["self"]],[T]]],[11,R[25],E,E,18,[[["self"],[T]]]],[11,R[21],E,E,18,[[[U]],[R[26]]]],[11,R[22],E,E,18,[[],[R[26]]]],[11,R[29],E,E,18,[[["self"]],[T]]],[11,R[23],E,E,18,[[["self"]],[T]]],[11,R[27],E,E,18,[[["self"]],[R[30]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[24],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"],[T]]]],[11,R[21],E,E,4,[[[U]],[R[26]]]],[11,R[22],E,E,4,[[],[R[26]]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[27],E,E,4,[[["self"]],[R[30]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[24],E,E,19,[[["self"]],[T]]],[11,R[25],E,E,19,[[["self"],[T]]]],[11,R[21],E,E,19,[[[U]],[R[26]]]],[11,R[22],E,E,19,[[],[R[26]]]],[11,R[29],E,E,19,[[["self"]],[T]]],[11,R[23],E,E,19,[[["self"]],[T]]],[11,R[27],E,E,19,[[["self"]],[R[30]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[24],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"],[T]]]],[11,R[21],E,E,5,[[[U]],[R[26]]]],[11,R[22],E,E,5,[[],[R[26]]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[27],E,E,5,[[["self"]],[R[30]]]],[11,R[34],"bv",E,0,[[["self"]],["u64"]]],[11,R[31],E,E,0,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,0,[[["self"],[R[6]]],["block"]]],[11,R[33],E,E,0,[[["self"],[R[6]]],["block"]]],[11,R[12],E,E,0,[[[R[6]],["self"],["u64"]]]],[11,R[34],E,E,1,[[["self"]],["u64"]]],[11,R[31],E,E,1,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,1,[[["self"],[R[6]]],["block"]]],[11,R[12],E,E,1,[[[R[6]],["self"],["u64"]]]],[11,R[34],E,E,2,[[["self"]],["u64"]]],[11,R[31],E,E,2,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,2,[[["self"],[R[6]]],["block"]]],[11,R[33],E,E,2,[[["self"],[R[6]]],["block"]]],[11,R[34],R[28],E,3,[[["self"]],["u64"]]],[11,R[31],E,E,3,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,3,[[["self"],[R[6]]]]],[11,R[12],E,E,3,[[[R[6]],["self"],["u64"]]]],[11,R[34],E,E,14,[[["self"]],["u64"]]],[11,R[31],E,E,14,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,14,[[["self"],[R[6]]]]],[11,R[33],E,E,14,[[["self"],[R[6]]]]],[11,R[34],E,E,15,[[["self"]],["u64"]]],[11,R[31],E,E,15,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,15,[[["self"],[R[6]]]]],[11,R[33],E,E,15,[[["self"],[R[6]]]]],[11,R[34],E,E,16,[[["self"]],["u64"]]],[11,R[31],E,E,16,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,16,[[["self"],[R[6]]]]],[11,R[33],E,E,16,[[["self"],[R[6]]]]],[11,R[34],E,E,17,[[["self"]],["u64"]]],[11,R[31],E,E,17,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,17,[[["self"],[R[6]]]]],[11,R[33],E,E,17,[[["self"],[R[6]]]]],[11,R[34],E,E,18,[[["self"]],["u64"]]],[11,R[32],E,E,18,[[["self"],[R[6]]]]],[11,R[33],E,E,18,[[["self"],[R[6]]]]],[11,R[34],E,E,4,[[["self"]],["u64"]]],[11,R[31],E,E,4,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,4,[[["self"],[R[6]]]]],[11,R[33],E,E,4,[[["self"],[R[6]]]]],[11,R[12],E,E,4,[[[R[6]],["self"],["u64"]]]],[11,R[34],E,E,19,[[["self"]],["u64"]]],[11,R[31],E,E,19,[[["self"],["u64"]],["bool"]]],[11,R[32],E,E,19,[[["self"],[R[6]]]]],[11,R[34],E,E,5,[[["self"]],["u64"]]],[11,R[31],E,E,5,[[["self"],["u64"]],["bool"]]],[11,R[34],E,E,5,[[["self"]],["u64"]]],[11,R[31],E,E,5,[[["self"],["u64"]],["bool"]]],[11,R[34],E,E,5,[[["self"]],["u64"]]],[11,R[31],E,E,5,[[["self"],["u64"]],["bool"]]],[11,R[34],E,E,5,[[["self"]],["u64"]]],[11,R[31],E,E,5,[[["self"],["u64"]],["bool"]]],[11,R[37],"bv",E,1,[[["self"],["u64"],["bool"]]]],[11,R[35],E,E,1,[[["self"],[R[6]],["block"]]]],[11,R[36],E,E,1,[[[R[6]],["self"],["u64"]]]],[11,R[37],E,E,2,[[["self"],["u64"],["bool"]]]],[11,R[35],E,E,2,[[["self"],[R[6]],["block"]]]],[11,R[37],R[28],E,3,[[["self"],["u64"],["bool"]]]],[11,R[35],E,E,3,[[["self"],[R[6]]]]],[11,R[36],E,E,3,[[[R[6]],["self"],["u64"]]]],[11,R[37],E,E,5,[[["self"],["u64"],["bool"]]]],[11,R[37],E,E,5,[[["self"],["u64"],["bool"]]]],[11,R[37],E,E,5,[[["self"],["u64"],["bool"]]]],[11,R[38],"bv",E,2,[[["self"],["bool"]]]],[11,R[41],E,E,2,[[["self"]],[[R[9],["bool"]],["bool"]]]],[11,R[39],E,E,2,[[["self"],["bool"]]]],[11,R[40],E,E,2,[[["self"],["block"]]]],[11,R[38],R[28],E,5,[[["self"],["bool"]]]],[11,R[41],E,E,5,[[["self"]],[[R[9],["bool"]],["bool"]]]],[11,R[38],E,E,5,[[["self"],["bool"]]]],[11,R[41],E,E,5,[[["self"]],[[R[9],["bool"]],["bool"]]]],[11,R[42],"bv",E,0,[[["range",["u64"]],["u64"]],["self"]]],[11,R[42],E,E,1,[[["range",["u64"]],["u64"]],["self"]]],[11,R[42],E,E,0,[[[R[43],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,1,[[[R[43],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,0,[[[R[44],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,1,[[[R[44],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,0,[[[R[47],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,1,[[[R[47],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,0,[[[R[45],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,1,[[[R[45],["u64"]],["u64"]],["self"]]],[11,R[42],E,E,0,[[[R[46]]],["self"]]],[11,R[42],E,E,1,[[[R[46]]],["self"]]],[11,R[42],R[28],E,3,[[["range",["u64"]],["u64"]]]],[11,R[42],E,E,3,[[[R[47],["u64"]],["u64"]]]],[11,R[42],E,E,3,[[[R[44],["u64"]],["u64"]]]],[11,R[42],E,E,3,[[[R[46]]]]],[11,R[42],E,E,3,[[[R[43],["u64"]],["u64"]]]],[11,R[42],E,E,3,[[[R[45],["u64"]],["u64"]]]],[11,R[42],E,E,14,[[["r"]]]],[11,R[42],E,E,15,[[["r"]]]],[11,R[42],E,E,16,[[["r"]]]],[11,R[42],E,E,17,[[["r"]]]],[11,R[42],E,E,18,[[["r"]]]],[11,R[42],E,E,4,[[["u64"],["range",["u64"]]]]],[11,R[42],E,E,4,[[[R[44],["u64"]],["u64"]]]],[11,R[42],E,E,4,[[[R[47],["u64"]],["u64"]]]],[11,R[42],E,E,4,[[[R[46]]]]],[11,R[42],E,E,4,[[["u64"],[R[43],["u64"]]]]],[11,R[42],E,E,4,[[[R[45],["u64"]],["u64"]]]],[11,R[42],E,E,19,[[["u64"],["range",["u64"]]]]],[11,R[42],E,E,19,[[[R[44],["u64"]],["u64"]]]],[11,R[42],E,E,19,[[[R[47],["u64"]],["u64"]]]],[11,R[42],E,E,19,[[[R[46]]]]],[11,R[42],E,E,19,[[["u64"],[R[43],["u64"]]]]],[11,R[42],E,E,19,[[[R[45],["u64"]],["u64"]]]],[11,"from","bv",E,0,[[[R[48]]],["self"]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,1,[[],["self"]]],[11,"from",E,E,2,[[["box"]],["self"]]],[11,"from",E,E,2,[[["vec"]],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[7]]]],[11,"clone",E,E,2,[[["self"]],["bitvec"]]],[11,"clone",R[28],E,3,[[["self"]],["bitsliceadapter"]]],[11,"clone",E,E,14,[[["self"]],[R[92]]]],[11,"clone",E,E,15,[[["self"]],[R[94]]]],[11,"clone",E,E,16,[[["self"]],["bitor"]]],[11,"clone",E,E,17,[[["self"]],[R[97]]]],[11,"clone",E,E,18,[[["self"]],[R[99]]]],[11,"clone",E,E,4,[[["self"]],[R[16]]]],[11,"clone",E,E,19,[[["self"]],[R[14]]]],[11,"clone",E,E,5,[[["self"]],["booladapter"]]],[11,"default","bv",E,2,[[],["self"]]],[11,"cmp",E,E,0,[[["self"]],[R[49]]]],[11,"cmp",E,E,1,[[["self"]],[R[49]]]],[11,"cmp",E,E,2,[[["self"]],[R[49]]]],[11,"eq",E,E,0,[[["other"],["self"]],["bool"]]],[11,"eq",E,E,1,[[["other"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["other"],["self"]],["bool"]]],[11,"eq",R[28],E,3,[[["self"],[U]],["bool"]]],[11,"eq",E,E,14,[[["self"],[U]],["bool"]]],[11,"eq",E,E,15,[[["v"],["self"]],["bool"]]],[11,"eq",E,E,16,[[["v"],["self"]],["bool"]]],[11,"eq",E,E,17,[[["v"],["self"]],["bool"]]],[11,"eq",E,E,18,[[["v"],["self"]],["bool"]]],[11,"eq",E,E,4,[[[T],["self"]],["bool"]]],[11,"eq",E,E,19,[[["v"],["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[U]],["bool"]]],[11,R[50],"bv",E,0,[[["self"],[R[7]]],[[R[9],[R[49]]],[R[49]]]]],[11,R[50],E,E,1,[[[R[48]],["self"]],[[R[9],[R[49]]],[R[49]]]]],[11,R[50],E,E,2,[[["bitvec"],["self"]],[[R[49]],[R[9],[R[49]]]]]],[11,"fmt",E,E,0,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,1,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,2,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",R[28],E,3,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,14,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,15,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,16,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,17,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,18,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,4,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,19,[[["self"],[R[51]]],[R[26]]]],[11,"fmt",E,E,5,[[["self"],[R[51]]],[R[26]]]],[11,"deref",E,E,5,[[["self"]],[T]]],[11,"deref_mut",E,E,5,[[["self"]],[T]]],[11,"index","bv",E,0,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,1,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,2,[[["self"],["u64"]],["bool"]]],[11,"index",R[28],E,3,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,14,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,15,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,16,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,17,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,18,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,4,[[["self"],["u64"]],["bool"]]],[11,"index",E,E,19,[[["self"],["u64"]],["bool"]]],[11,"hash","bv",E,0,[[["self"],["h"]]]],[11,"hash",E,E,1,[[["self"],["h"]]]],[11,"hash",E,E,2,[[["self"],["h"]]]],[11,"nbits",E,R[52],6,[[],[R[6]]]],[11,R[53],E,R[8],6,[[["u64"]],[R[6]]]],[11,R[54],E,R[8],6,[[["u64"]],[[R[9],[R[6]]],[R[6]]]]],[11,R[55],E,R[10],6,[[["u64"]],[R[6]]]],[11,R[56],E,R[10],6,[[["u64"]],[[R[9],[R[6]]],[R[6]]]]],[11,R[57],E,R[58],6,[[["u64"]],[R[6]]]],[11,R[59],E,R[60],6,[[[R[6]]],["u64"]]],[11,R[61],E,R[62],6,[[["u64"],[R[6]]],[R[6]]]],[11,R[63],E,R[64],6,[[],[R[6]]]],[11,R[65],E,R[66],6,[[],[R[67]]]],[11,R[68],E,R[69],6,[[[R[6]]],["self"]]],[11,R[70],E,R[71],6,[[[R[6]]],["self"]]],[11,R[31],E,R[72],6,[[[R[6]]],["bool"]]],[11,R[73],E,R[74],6,[[[R[6]],["bool"]],["self"]]],[11,R[12],E,R[75],6,[[[R[6]]],["self"]]],[11,R[76],E,R[77],6,[[[R[6]]],["self"]]],[11,"ceil_lg",E,R[78],6,[[],[R[6]]]],[11,R[79],E,R[80],6,[[],[R[6]]]],[11,R[11],E,R[81],7,[[["self"]],[R[6]]]],[11,R[31],E,R[82],7,[[["self"],["u64"]],["bool"]]],[11,R[32],E,R[83],7,[[["self"],[R[6]]]]],[11,R[33],E,R[84],7,[[["self"],[R[6]]]]],[11,R[12],E,R[85],7,[[[R[6]],["self"],["u64"]]]],[11,R[86],E,R[87],7,[[["self"]],["bitvec"]]],[11,R[88],E,R[13],8,[[["other"],["self"]],[[R[14]],["self"]]]],[11,R[89],E,R[13],8,[[["other"]],[R[14]]]],[11,"bit_pad",E,R[15],8,[[["self"],["u64"]],[[R[16]],["self"],[R[14],[R[16]]]]]],[11,R[90],E,R[15],8,[[["u64"]],[[R[16]],[R[14],[R[16]]]]]],[11,"bit_not",E,R[17],8,[[["self"]],[[R[92]],["self"]]]],[11,R[91],E,R[17],8,[[],[R[92]]]],[11,"bit_and",E,R[18],8,[[["other"],["self"]],[[R[94]],["self"]]]],[11,R[93],E,R[18],8,[[["other"]],[R[94]]]],[11,"bit_or",E,R[18],8,[[["other"],["self"]],[["bitor"],["self"]]]],[11,R[95],E,R[18],8,[[["other"]],["bitor"]]],[11,"bit_xor",E,R[19],8,[[["other"],["self"]],[[R[97]],["self"]]]],[11,R[96],E,R[19],8,[[["other"]],[R[97]]]],[11,"bit_zip",E,R[20],8,[[["other"],["self"],["f"]],[[R[99]],["self"]]]],[11,R[98],E,R[20],8,[[["other"],["f"]],[R[99]]]],[11,R[37],E,R[100],9,[[["self"],["u64"],["bool"]]]],[11,R[35],E,R[101],9,[[["self"],[R[6]]]]],[11,R[36],E,R[102],9,[[[R[6]],["self"],["u64"]]]],[11,R[103],E,R[104],10,[[["self"],["bits"]]]],[11,R[105],E,R[106],10,[[["self"],["bits"]]]],[11,R[107],E,R[108],10,[[["self"],["bits"]]]],[11,R[109],E,R[110],10,[[["self"],["bits"]]]],[11,R[111],E,R[112],10,[[["self"],[T],["f"]]]],[11,R[39],E,R[113],11,[[["self"],["bool"]]]],[11,R[40],E,R[114],11,[[["self"]]]],[11,R[115],E,R[116],13,[[["range"]]]]],"p":[[3,"BitSlice"],[3,R[117]],[3,"BitVec"],[3,R[118]],[3,"BitFill"],[3,R[119]],[8,R[120]],[8,"Bits"],[8,"BitsExt"],[8,"BitsMut"],[8,R[121]],[8,"BitsPush"],[8,R[122]],[8,R[123]],[3,"BitNot"],[3,"BitAnd"],[3,"BitOr"],[3,"BitXor"],[3,"BitZip"],[3,R[124]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);